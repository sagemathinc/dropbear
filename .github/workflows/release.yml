name: Build, Test & Release Dropbear Binaries

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

jobs:
  build:
    name: build ${{ matrix.target }}
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-linux-musl
            runs_on: ubuntu-latest
          - target: aarch64-linux-musl
            runs_on: ubuntu-24.04-arm

    env:
      DROPBEAR_VERSION: 2025.88
      ZIG_VERSION: 0.15.1
      JOBS: 8

    steps:
      - uses: actions/checkout@v4

      # (Optional) prove weâ€™re on the expected arch
      - name: Smoke arch
        run: uname -m

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl ca-certificates tar bzip2 xz-utils autoconf automake make gcc g++ cmake ninja-build

      - name: Make build scripts executable
        run: |
          git update-index --chmod=+x build.sh
          git update-index --chmod=+x build-sftp-openssh.sh

      - name: Build static dropbearmulti (musl)
        env:
          TARGET: ${{ matrix.target }}
          DROPBEAR_VERSION: ${{ env.DROPBEAR_VERSION }}
          ZIG_VERSION: ${{ env.ZIG_VERSION }}
          JOBS: ${{ env.JOBS }}
        run: ./build.sh

      - name: Show dropbear outputs
        run: ls -l dropbear-*.tar.xz*

      - name: Build static sftp-server (OpenSSH)
        env:
          TARGET: ${{ matrix.target }}
          OPENSSH_VERSION: 9.8p1
          ZIG_VERSION: ${{ env.ZIG_VERSION }}
          JOBS: ${{ env.JOBS }}
        run: ./build-sftp-openssh.sh

      - name: Show sftp outputs
        run: ls -l sftp-server-*.tar.xz*

      # Simple container smoke check matching the target arch
      - name: Test binaries in Alpine container
        env:
          TARGET: ${{ matrix.target }}
        run: |
          case "$TARGET" in
            x86_64-linux-musl) plat="linux/amd64" ;;
            aarch64-linux-musl) plat="linux/arm64" ;;
            *) echo "Unknown TARGET $TARGET"; exit 1 ;;
          esac
          mkdir -p testdir testdir-sftp
          tar -xJf "dropbear-${TARGET}.tar.xz" -C testdir
          tar -xJf "sftp-server-${TARGET}.tar.xz" -C testdir-sftp
          docker run --rm --platform "${plat}" -v "$PWD/testdir/dropbear-${TARGET}:/out:ro" alpine:3 sh -lc '
            apk add --no-cache file >/dev/null 2>&1 || true
            file /out/dropbear || true
            ldd /out/dropbear || true
            /out/dropbear -h >/dev/null || true
          '
          docker run --rm --platform "${plat}" -v "$PWD/testdir-sftp/sftp-server-${TARGET}:/out:ro" alpine:3 sh -lc '
            apk add --no-cache file >/dev/null 2>&1 || true
            file /out/sftp-server || true
            ldd /out/sftp-server || true
          '

      - name: Upload dropbear artifact (tarballs)
        uses: actions/upload-artifact@v4
        with:
          name: dropbear-${{ matrix.target }}
          overwrite: true
          path: |
            dropbear-${{ matrix.target }}.tar.xz
            dropbear-${{ matrix.target }}.tar.xz.SHA256

      - name: Upload sftp-server artifact (tarballs)
        uses: actions/upload-artifact@v4
        with:
          name: sftp-server-${{ matrix.target }}
          overwrite: true
          path: |
            sftp-server-${{ matrix.target }}.tar.xz
            sftp-server-${{ matrix.target }}.tar.xz.SHA256

  release:
    name: create github release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List artifacts
        run: ls -lR dist

      - name: Create / Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: |
            dist/**/dropbear-*.tar.xz
            dist/**/dropbear-*.tar.xz.SHA256
            dist/**/sftp-server-*.tar.xz
            dist/**/sftp-server-*.tar.xz.SHA256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
